// Package events provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package events

import (
	"encoding/json"
	"time"

	externalRef0 "terraform-provider-render/internal/client/autoscaling"
	externalRef2 "terraform-provider-render/internal/client/disks"
	externalRef4 "terraform-provider-render/internal/client/eventtypes"
	externalRef5 "terraform-provider-render/internal/client/jobs"

	"github.com/oapi-codegen/runtime"
)

// Defines values for CronJobRunStatus.
const (
	Canceled     CronJobRunStatus = "canceled"
	Pending      CronJobRunStatus = "pending"
	Successful   CronJobRunStatus = "successful"
	Unsuccessful CronJobRunStatus = "unsuccessful"
)

// AutoscalingConfigChangedEvent defines model for autoscalingConfigChangedEvent.
type AutoscalingConfigChangedEvent struct {
	FromConfig *externalRef0.AutoscalingConfig `json:"fromConfig,omitempty"`
	ToConfig   externalRef0.AutoscalingConfig  `json:"toConfig"`
}

// AutoscalingEndedEvent defines model for autoscalingEndedEvent.
type AutoscalingEndedEvent struct {
	FromInstances int `json:"fromInstances"`
	ToInstances   int `json:"toInstances"`
}

// AutoscalingStartedEvent defines model for autoscalingStartedEvent.
type AutoscalingStartedEvent struct {
	CurrentCPU    *int64 `json:"currentCPU,omitempty"`
	CurrentMemory *int64 `json:"currentMemory,omitempty"`
	FromInstances int    `json:"fromInstances"`
	TargetCPU     *int64 `json:"targetCPU,omitempty"`
	TargetMemory  *int64 `json:"targetMemory,omitempty"`
	ToInstances   int    `json:"toInstances"`
}

// BranchDeletedEvent defines model for branchDeletedEvent.
type BranchDeletedEvent struct {
	DeletedBranch string `json:"deletedBranch"`
	NewBranch     string `json:"newBranch"`
}

// BuildDeployEndReason defines model for buildDeployEndReason.
type BuildDeployEndReason struct {
	BuildFailed *BuildDeployEndReasonID `json:"buildFailed,omitempty"`
	Failure     *FailureReason          `json:"failure,omitempty"`
	NewBuild    *BuildDeployEndReasonID `json:"newBuild,omitempty"`
	NewDeploy   *BuildDeployEndReasonID `json:"newDeploy,omitempty"`
}

// BuildDeployEndReasonID defines model for buildDeployEndReasonID.
type BuildDeployEndReasonID struct {
	Id string `json:"id"`
}

// BuildDeployTrigger defines model for buildDeployTrigger.
type BuildDeployTrigger struct {
	// ClearCache Whether the cache was cleared for the deploy
	ClearCache bool `json:"clearCache"`

	// DeployedByRender Deploy was triggered by Render
	DeployedByRender bool `json:"deployedByRender"`

	// EnvUpdated Deploy was triggered by an environment update
	EnvUpdated bool `json:"envUpdated"`

	// FirstBuild Deploy was triggered by service creation
	FirstBuild bool `json:"firstBuild"`

	// Manual Deploy was triggered manually from the dashboard
	Manual bool `json:"manual"`

	// NewCommit Commit that triggered the deploy
	NewCommit *string `json:"newCommit,omitempty"`

	// Rollback Whether the deploy was triggered by a rollback
	Rollback bool `json:"rollback"`

	// RollbackTargetDeployId Deploy ID that was rolled back to
	RollbackTargetDeployId *string `json:"rollbackTargetDeployId,omitempty"`

	// UpdatedProperty Updated property that triggered the deploy
	UpdatedProperty *string `json:"updatedProperty,omitempty"`

	// User User who triggered the action
	User *User `json:"user,omitempty"`
}

// BuildEndedEvent defines model for buildEndedEvent.
type BuildEndedEvent struct {
	BuildId string               `json:"buildId"`
	Reason  BuildDeployEndReason `json:"reason"`
	Status  int                  `json:"status"`
}

// BuildPlanChangedEvent defines model for buildPlanChangedEvent.
type BuildPlanChangedEvent struct {
	From string `json:"from"`
	To   string `json:"to"`
}

// BuildStartedEvent defines model for buildStartedEvent.
type BuildStartedEvent struct {
	BuildId string             `json:"buildId"`
	Trigger BuildDeployTrigger `json:"trigger"`
}

// CommitIgnoredEvent defines model for commitIgnoredEvent.
type CommitIgnoredEvent struct {
	// Id the commit id
	Id string `json:"id"`

	// Url the commit url
	Url string `json:"url"`
}

// CronJobRunEndedEvent defines model for cronJobRunEndedEvent.
type CronJobRunEndedEvent struct {
	CronJobRunId string           `json:"cronJobRunId"`
	Reason       *FailureReason   `json:"reason,omitempty"`
	Status       CronJobRunStatus `json:"status"`

	// User User who triggered the action
	User *User `json:"user,omitempty"`
}

// CronJobRunStartedEvent defines model for cronJobRunStartedEvent.
type CronJobRunStartedEvent struct {
	CronJobRunId string `json:"cronJobRunId"`
}

// CronJobRunStatus defines model for cronJobRunStatus.
type CronJobRunStatus string

// DeployEndedEvent defines model for deployEndedEvent.
type DeployEndedEvent struct {
	DeployId string               `json:"deployId"`
	Reason   BuildDeployEndReason `json:"reason"`
	Status   int                  `json:"status"`
}

// DeployStartedEvent defines model for deployStartedEvent.
type DeployStartedEvent struct {
	DeployId string             `json:"deployId"`
	Trigger  BuildDeployTrigger `json:"trigger"`
}

// DiskCreatedEvent defines model for diskCreatedEvent.
type DiskCreatedEvent struct {
	DiskId externalRef2.DiskId `json:"diskId"`
	SizeGB int                 `json:"sizeGB"`
}

// DiskDeletedEvent defines model for diskDeletedEvent.
type DiskDeletedEvent struct {
	DiskId externalRef2.DiskId `json:"diskId"`
}

// DiskUpdatedEvent defines model for diskUpdatedEvent.
type DiskUpdatedEvent struct {
	DiskId     externalRef2.DiskId `json:"diskId"`
	FromSizeGB int                 `json:"fromSizeGB"`
	ToSizeGB   int                 `json:"toSizeGB"`
}

// EventDetails defines model for eventDetails.
type EventDetails struct {
	union json.RawMessage
}

// FailureReason defines model for failureReason.
type FailureReason struct {
	Evicted         bool       `json:"evicted"`
	NonZeroExit     *int       `json:"nonZeroExit,omitempty"`
	OomKilled       *OomKilled `json:"oomKilled,omitempty"`
	TimedOutReason  *string    `json:"timedOutReason,omitempty"`
	TimedOutSeconds *int64     `json:"timedOutSeconds,omitempty"`
	Unhealthy       *string    `json:"unhealthy,omitempty"`
}

// ImagePullFailedEvent defines model for imagePullFailedEvent.
type ImagePullFailedEvent struct {
	ImageURL string `json:"imageURL"`
	Message  string `json:"message"`
}

// InitialDeployHookEndedEvent defines model for initialDeployHookEndedEvent.
type InitialDeployHookEndedEvent struct {
	DeployId string `json:"deployId"`
}

// InitialDeployHookStartedEvent defines model for initialDeployHookStartedEvent.
type InitialDeployHookStartedEvent struct {
	DeployId string `json:"deployId"`
}

// InstanceCountChangedEvent defines model for instanceCountChangedEvent.
type InstanceCountChangedEvent struct {
	FromInstances int `json:"fromInstances"`
	ToInstances   int `json:"toInstances"`
}

// JobRunEndedEvent defines model for jobRunEndedEvent.
type JobRunEndedEvent struct {
	JobId  externalRef5.JobId     `json:"jobId"`
	Reason *FailureReason         `json:"reason,omitempty"`
	Status externalRef5.JobStatus `json:"status"`
}

// MaintenanceEndedEvent defines model for maintenanceEndedEvent.
type MaintenanceEndedEvent = map[string]interface{}

// MaintenanceModeEnabledEvent defines model for maintenanceModeEnabledEvent.
type MaintenanceModeEnabledEvent struct {
	Enabled bool `json:"enabled"`
}

// MaintenanceModeURIUpdatedEvent defines model for maintenanceModeURIUpdatedEvent.
type MaintenanceModeURIUpdatedEvent struct {
	FromURI string `json:"fromURI"`
	ToURI   string `json:"toURI"`
}

// MaintenanceStartedEvent defines model for maintenanceStartedEvent.
type MaintenanceStartedEvent struct {
	Trigger MaintenanceTrigger `json:"trigger"`
}

// MaintenanceTrigger defines model for maintenanceTrigger.
type MaintenanceTrigger struct {
	// Manual Maintenance was triggered manually
	Manual bool `json:"manual"`

	// StartedByRender Maintenance was triggered by Render
	StartedByRender bool `json:"startedByRender"`

	// User User who triggered the action
	User *User `json:"user,omitempty"`
}

// OomKilled defines model for oomKilled.
type OomKilled struct {
	MemoryLimit string `json:"memoryLimit"`
}

// PlanChangedEvent defines model for planChangedEvent.
type PlanChangedEvent struct {
	From string `json:"from"`
	To   string `json:"to"`
}

// PreDeployEndedEvent defines model for preDeployEndedEvent.
type PreDeployEndedEvent struct {
	DeployCommandExecutionId string               `json:"deployCommandExecutionId"`
	DeployId                 string               `json:"deployId"`
	Reason                   BuildDeployEndReason `json:"reason"`
	Status                   int                  `json:"status"`
}

// PreDeployStartedEvent defines model for preDeployStartedEvent.
type PreDeployStartedEvent struct {
	DeployCommandExecutionId string `json:"deployCommandExecutionId"`
	DeployId                 string `json:"deployId"`
}

// ServerAvailableEvent defines model for serverAvailableEvent.
type ServerAvailableEvent = map[string]interface{}

// ServerFailedEvent defines model for serverFailedEvent.
type ServerFailedEvent struct {
	Reason *FailureReason `json:"reason,omitempty"`
}

// ServerHardwareFailureEvent defines model for serverHardwareFailureEvent.
type ServerHardwareFailureEvent = map[string]interface{}

// ServerRestartedEvent defines model for serverRestartedEvent.
type ServerRestartedEvent struct {
	TriggeredByUser *string `json:"triggeredByUser"`
}

// ServerUnhealthyEvent defines model for serverUnhealthyEvent.
type ServerUnhealthyEvent = map[string]interface{}

// ServiceEvent defines model for serviceEvent.
type ServiceEvent struct {
	Details   EventDetails           `json:"details"`
	Id        string                 `json:"id"`
	ServiceId string                 `json:"serviceId"`
	Timestamp time.Time              `json:"timestamp"`
	Type      externalRef4.EventType `json:"type"`
}

// ServiceResumedEvent defines model for serviceResumedEvent.
type ServiceResumedEvent = map[string]interface{}

// ServiceSuspendedEvent defines model for serviceSuspendedEvent.
type ServiceSuspendedEvent = map[string]interface{}

// SuspenderAddedEvent defines model for suspenderAddedEvent.
type SuspenderAddedEvent struct {
	Actor string `json:"actor"`

	// SuspendedByUser User who triggered the action
	SuspendedByUser *User `json:"suspendedByUser,omitempty"`
}

// SuspenderRemovedEvent defines model for suspenderRemovedEvent.
type SuspenderRemovedEvent struct {
	Actor string `json:"actor"`

	// ResumedByUser User who triggered the action
	ResumedByUser *User `json:"resumedByUser,omitempty"`
}

// User User who triggered the action
type User struct {
	Email string `json:"email"`
	Id    string `json:"id"`
}

// ZeroDowntimeRedeployEndedEvent defines model for zeroDowntimeRedeployEndedEvent.
type ZeroDowntimeRedeployEndedEvent = map[string]interface{}

// ZeroDowntimeRedeployStartedEvent defines model for zeroDowntimeRedeployStartedEvent.
type ZeroDowntimeRedeployStartedEvent struct {
	Trigger string `json:"trigger"`
}

// AsInitialDeployHookEndedEvent returns the union data inside the EventDetails as a InitialDeployHookEndedEvent
func (t EventDetails) AsInitialDeployHookEndedEvent() (InitialDeployHookEndedEvent, error) {
	var body InitialDeployHookEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInitialDeployHookEndedEvent overwrites any union data inside the EventDetails as the provided InitialDeployHookEndedEvent
func (t *EventDetails) FromInitialDeployHookEndedEvent(v InitialDeployHookEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInitialDeployHookEndedEvent performs a merge with any union data inside the EventDetails, using the provided InitialDeployHookEndedEvent
func (t *EventDetails) MergeInitialDeployHookEndedEvent(v InitialDeployHookEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoscalingConfigChangedEvent returns the union data inside the EventDetails as a AutoscalingConfigChangedEvent
func (t EventDetails) AsAutoscalingConfigChangedEvent() (AutoscalingConfigChangedEvent, error) {
	var body AutoscalingConfigChangedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoscalingConfigChangedEvent overwrites any union data inside the EventDetails as the provided AutoscalingConfigChangedEvent
func (t *EventDetails) FromAutoscalingConfigChangedEvent(v AutoscalingConfigChangedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoscalingConfigChangedEvent performs a merge with any union data inside the EventDetails, using the provided AutoscalingConfigChangedEvent
func (t *EventDetails) MergeAutoscalingConfigChangedEvent(v AutoscalingConfigChangedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoscalingEndedEvent returns the union data inside the EventDetails as a AutoscalingEndedEvent
func (t EventDetails) AsAutoscalingEndedEvent() (AutoscalingEndedEvent, error) {
	var body AutoscalingEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoscalingEndedEvent overwrites any union data inside the EventDetails as the provided AutoscalingEndedEvent
func (t *EventDetails) FromAutoscalingEndedEvent(v AutoscalingEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoscalingEndedEvent performs a merge with any union data inside the EventDetails, using the provided AutoscalingEndedEvent
func (t *EventDetails) MergeAutoscalingEndedEvent(v AutoscalingEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAutoscalingStartedEvent returns the union data inside the EventDetails as a AutoscalingStartedEvent
func (t EventDetails) AsAutoscalingStartedEvent() (AutoscalingStartedEvent, error) {
	var body AutoscalingStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAutoscalingStartedEvent overwrites any union data inside the EventDetails as the provided AutoscalingStartedEvent
func (t *EventDetails) FromAutoscalingStartedEvent(v AutoscalingStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAutoscalingStartedEvent performs a merge with any union data inside the EventDetails, using the provided AutoscalingStartedEvent
func (t *EventDetails) MergeAutoscalingStartedEvent(v AutoscalingStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBranchDeletedEvent returns the union data inside the EventDetails as a BranchDeletedEvent
func (t EventDetails) AsBranchDeletedEvent() (BranchDeletedEvent, error) {
	var body BranchDeletedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBranchDeletedEvent overwrites any union data inside the EventDetails as the provided BranchDeletedEvent
func (t *EventDetails) FromBranchDeletedEvent(v BranchDeletedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBranchDeletedEvent performs a merge with any union data inside the EventDetails, using the provided BranchDeletedEvent
func (t *EventDetails) MergeBranchDeletedEvent(v BranchDeletedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildEndedEvent returns the union data inside the EventDetails as a BuildEndedEvent
func (t EventDetails) AsBuildEndedEvent() (BuildEndedEvent, error) {
	var body BuildEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildEndedEvent overwrites any union data inside the EventDetails as the provided BuildEndedEvent
func (t *EventDetails) FromBuildEndedEvent(v BuildEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildEndedEvent performs a merge with any union data inside the EventDetails, using the provided BuildEndedEvent
func (t *EventDetails) MergeBuildEndedEvent(v BuildEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildPlanChangedEvent returns the union data inside the EventDetails as a BuildPlanChangedEvent
func (t EventDetails) AsBuildPlanChangedEvent() (BuildPlanChangedEvent, error) {
	var body BuildPlanChangedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildPlanChangedEvent overwrites any union data inside the EventDetails as the provided BuildPlanChangedEvent
func (t *EventDetails) FromBuildPlanChangedEvent(v BuildPlanChangedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildPlanChangedEvent performs a merge with any union data inside the EventDetails, using the provided BuildPlanChangedEvent
func (t *EventDetails) MergeBuildPlanChangedEvent(v BuildPlanChangedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBuildStartedEvent returns the union data inside the EventDetails as a BuildStartedEvent
func (t EventDetails) AsBuildStartedEvent() (BuildStartedEvent, error) {
	var body BuildStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBuildStartedEvent overwrites any union data inside the EventDetails as the provided BuildStartedEvent
func (t *EventDetails) FromBuildStartedEvent(v BuildStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBuildStartedEvent performs a merge with any union data inside the EventDetails, using the provided BuildStartedEvent
func (t *EventDetails) MergeBuildStartedEvent(v BuildStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCommitIgnoredEvent returns the union data inside the EventDetails as a CommitIgnoredEvent
func (t EventDetails) AsCommitIgnoredEvent() (CommitIgnoredEvent, error) {
	var body CommitIgnoredEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCommitIgnoredEvent overwrites any union data inside the EventDetails as the provided CommitIgnoredEvent
func (t *EventDetails) FromCommitIgnoredEvent(v CommitIgnoredEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCommitIgnoredEvent performs a merge with any union data inside the EventDetails, using the provided CommitIgnoredEvent
func (t *EventDetails) MergeCommitIgnoredEvent(v CommitIgnoredEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCronJobRunEndedEvent returns the union data inside the EventDetails as a CronJobRunEndedEvent
func (t EventDetails) AsCronJobRunEndedEvent() (CronJobRunEndedEvent, error) {
	var body CronJobRunEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCronJobRunEndedEvent overwrites any union data inside the EventDetails as the provided CronJobRunEndedEvent
func (t *EventDetails) FromCronJobRunEndedEvent(v CronJobRunEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCronJobRunEndedEvent performs a merge with any union data inside the EventDetails, using the provided CronJobRunEndedEvent
func (t *EventDetails) MergeCronJobRunEndedEvent(v CronJobRunEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCronJobRunStartedEvent returns the union data inside the EventDetails as a CronJobRunStartedEvent
func (t EventDetails) AsCronJobRunStartedEvent() (CronJobRunStartedEvent, error) {
	var body CronJobRunStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCronJobRunStartedEvent overwrites any union data inside the EventDetails as the provided CronJobRunStartedEvent
func (t *EventDetails) FromCronJobRunStartedEvent(v CronJobRunStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCronJobRunStartedEvent performs a merge with any union data inside the EventDetails, using the provided CronJobRunStartedEvent
func (t *EventDetails) MergeCronJobRunStartedEvent(v CronJobRunStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeployEndedEvent returns the union data inside the EventDetails as a DeployEndedEvent
func (t EventDetails) AsDeployEndedEvent() (DeployEndedEvent, error) {
	var body DeployEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeployEndedEvent overwrites any union data inside the EventDetails as the provided DeployEndedEvent
func (t *EventDetails) FromDeployEndedEvent(v DeployEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeployEndedEvent performs a merge with any union data inside the EventDetails, using the provided DeployEndedEvent
func (t *EventDetails) MergeDeployEndedEvent(v DeployEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeployStartedEvent returns the union data inside the EventDetails as a DeployStartedEvent
func (t EventDetails) AsDeployStartedEvent() (DeployStartedEvent, error) {
	var body DeployStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeployStartedEvent overwrites any union data inside the EventDetails as the provided DeployStartedEvent
func (t *EventDetails) FromDeployStartedEvent(v DeployStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeployStartedEvent performs a merge with any union data inside the EventDetails, using the provided DeployStartedEvent
func (t *EventDetails) MergeDeployStartedEvent(v DeployStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiskCreatedEvent returns the union data inside the EventDetails as a DiskCreatedEvent
func (t EventDetails) AsDiskCreatedEvent() (DiskCreatedEvent, error) {
	var body DiskCreatedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiskCreatedEvent overwrites any union data inside the EventDetails as the provided DiskCreatedEvent
func (t *EventDetails) FromDiskCreatedEvent(v DiskCreatedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiskCreatedEvent performs a merge with any union data inside the EventDetails, using the provided DiskCreatedEvent
func (t *EventDetails) MergeDiskCreatedEvent(v DiskCreatedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiskUpdatedEvent returns the union data inside the EventDetails as a DiskUpdatedEvent
func (t EventDetails) AsDiskUpdatedEvent() (DiskUpdatedEvent, error) {
	var body DiskUpdatedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiskUpdatedEvent overwrites any union data inside the EventDetails as the provided DiskUpdatedEvent
func (t *EventDetails) FromDiskUpdatedEvent(v DiskUpdatedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiskUpdatedEvent performs a merge with any union data inside the EventDetails, using the provided DiskUpdatedEvent
func (t *EventDetails) MergeDiskUpdatedEvent(v DiskUpdatedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiskDeletedEvent returns the union data inside the EventDetails as a DiskDeletedEvent
func (t EventDetails) AsDiskDeletedEvent() (DiskDeletedEvent, error) {
	var body DiskDeletedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiskDeletedEvent overwrites any union data inside the EventDetails as the provided DiskDeletedEvent
func (t *EventDetails) FromDiskDeletedEvent(v DiskDeletedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiskDeletedEvent performs a merge with any union data inside the EventDetails, using the provided DiskDeletedEvent
func (t *EventDetails) MergeDiskDeletedEvent(v DiskDeletedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsImagePullFailedEvent returns the union data inside the EventDetails as a ImagePullFailedEvent
func (t EventDetails) AsImagePullFailedEvent() (ImagePullFailedEvent, error) {
	var body ImagePullFailedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImagePullFailedEvent overwrites any union data inside the EventDetails as the provided ImagePullFailedEvent
func (t *EventDetails) FromImagePullFailedEvent(v ImagePullFailedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImagePullFailedEvent performs a merge with any union data inside the EventDetails, using the provided ImagePullFailedEvent
func (t *EventDetails) MergeImagePullFailedEvent(v ImagePullFailedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInitialDeployHookStartedEvent returns the union data inside the EventDetails as a InitialDeployHookStartedEvent
func (t EventDetails) AsInitialDeployHookStartedEvent() (InitialDeployHookStartedEvent, error) {
	var body InitialDeployHookStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInitialDeployHookStartedEvent overwrites any union data inside the EventDetails as the provided InitialDeployHookStartedEvent
func (t *EventDetails) FromInitialDeployHookStartedEvent(v InitialDeployHookStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInitialDeployHookStartedEvent performs a merge with any union data inside the EventDetails, using the provided InitialDeployHookStartedEvent
func (t *EventDetails) MergeInitialDeployHookStartedEvent(v InitialDeployHookStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstanceCountChangedEvent returns the union data inside the EventDetails as a InstanceCountChangedEvent
func (t EventDetails) AsInstanceCountChangedEvent() (InstanceCountChangedEvent, error) {
	var body InstanceCountChangedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstanceCountChangedEvent overwrites any union data inside the EventDetails as the provided InstanceCountChangedEvent
func (t *EventDetails) FromInstanceCountChangedEvent(v InstanceCountChangedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstanceCountChangedEvent performs a merge with any union data inside the EventDetails, using the provided InstanceCountChangedEvent
func (t *EventDetails) MergeInstanceCountChangedEvent(v InstanceCountChangedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobRunEndedEvent returns the union data inside the EventDetails as a JobRunEndedEvent
func (t EventDetails) AsJobRunEndedEvent() (JobRunEndedEvent, error) {
	var body JobRunEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobRunEndedEvent overwrites any union data inside the EventDetails as the provided JobRunEndedEvent
func (t *EventDetails) FromJobRunEndedEvent(v JobRunEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobRunEndedEvent performs a merge with any union data inside the EventDetails, using the provided JobRunEndedEvent
func (t *EventDetails) MergeJobRunEndedEvent(v JobRunEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaintenanceModeEnabledEvent returns the union data inside the EventDetails as a MaintenanceModeEnabledEvent
func (t EventDetails) AsMaintenanceModeEnabledEvent() (MaintenanceModeEnabledEvent, error) {
	var body MaintenanceModeEnabledEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintenanceModeEnabledEvent overwrites any union data inside the EventDetails as the provided MaintenanceModeEnabledEvent
func (t *EventDetails) FromMaintenanceModeEnabledEvent(v MaintenanceModeEnabledEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintenanceModeEnabledEvent performs a merge with any union data inside the EventDetails, using the provided MaintenanceModeEnabledEvent
func (t *EventDetails) MergeMaintenanceModeEnabledEvent(v MaintenanceModeEnabledEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaintenanceModeURIUpdatedEvent returns the union data inside the EventDetails as a MaintenanceModeURIUpdatedEvent
func (t EventDetails) AsMaintenanceModeURIUpdatedEvent() (MaintenanceModeURIUpdatedEvent, error) {
	var body MaintenanceModeURIUpdatedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintenanceModeURIUpdatedEvent overwrites any union data inside the EventDetails as the provided MaintenanceModeURIUpdatedEvent
func (t *EventDetails) FromMaintenanceModeURIUpdatedEvent(v MaintenanceModeURIUpdatedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintenanceModeURIUpdatedEvent performs a merge with any union data inside the EventDetails, using the provided MaintenanceModeURIUpdatedEvent
func (t *EventDetails) MergeMaintenanceModeURIUpdatedEvent(v MaintenanceModeURIUpdatedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaintenanceEndedEvent returns the union data inside the EventDetails as a MaintenanceEndedEvent
func (t EventDetails) AsMaintenanceEndedEvent() (MaintenanceEndedEvent, error) {
	var body MaintenanceEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintenanceEndedEvent overwrites any union data inside the EventDetails as the provided MaintenanceEndedEvent
func (t *EventDetails) FromMaintenanceEndedEvent(v MaintenanceEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintenanceEndedEvent performs a merge with any union data inside the EventDetails, using the provided MaintenanceEndedEvent
func (t *EventDetails) MergeMaintenanceEndedEvent(v MaintenanceEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaintenanceStartedEvent returns the union data inside the EventDetails as a MaintenanceStartedEvent
func (t EventDetails) AsMaintenanceStartedEvent() (MaintenanceStartedEvent, error) {
	var body MaintenanceStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintenanceStartedEvent overwrites any union data inside the EventDetails as the provided MaintenanceStartedEvent
func (t *EventDetails) FromMaintenanceStartedEvent(v MaintenanceStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintenanceStartedEvent performs a merge with any union data inside the EventDetails, using the provided MaintenanceStartedEvent
func (t *EventDetails) MergeMaintenanceStartedEvent(v MaintenanceStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlanChangedEvent returns the union data inside the EventDetails as a PlanChangedEvent
func (t EventDetails) AsPlanChangedEvent() (PlanChangedEvent, error) {
	var body PlanChangedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanChangedEvent overwrites any union data inside the EventDetails as the provided PlanChangedEvent
func (t *EventDetails) FromPlanChangedEvent(v PlanChangedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanChangedEvent performs a merge with any union data inside the EventDetails, using the provided PlanChangedEvent
func (t *EventDetails) MergePlanChangedEvent(v PlanChangedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreDeployEndedEvent returns the union data inside the EventDetails as a PreDeployEndedEvent
func (t EventDetails) AsPreDeployEndedEvent() (PreDeployEndedEvent, error) {
	var body PreDeployEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreDeployEndedEvent overwrites any union data inside the EventDetails as the provided PreDeployEndedEvent
func (t *EventDetails) FromPreDeployEndedEvent(v PreDeployEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreDeployEndedEvent performs a merge with any union data inside the EventDetails, using the provided PreDeployEndedEvent
func (t *EventDetails) MergePreDeployEndedEvent(v PreDeployEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreDeployStartedEvent returns the union data inside the EventDetails as a PreDeployStartedEvent
func (t EventDetails) AsPreDeployStartedEvent() (PreDeployStartedEvent, error) {
	var body PreDeployStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreDeployStartedEvent overwrites any union data inside the EventDetails as the provided PreDeployStartedEvent
func (t *EventDetails) FromPreDeployStartedEvent(v PreDeployStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreDeployStartedEvent performs a merge with any union data inside the EventDetails, using the provided PreDeployStartedEvent
func (t *EventDetails) MergePreDeployStartedEvent(v PreDeployStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServerAvailableEvent returns the union data inside the EventDetails as a ServerAvailableEvent
func (t EventDetails) AsServerAvailableEvent() (ServerAvailableEvent, error) {
	var body ServerAvailableEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServerAvailableEvent overwrites any union data inside the EventDetails as the provided ServerAvailableEvent
func (t *EventDetails) FromServerAvailableEvent(v ServerAvailableEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServerAvailableEvent performs a merge with any union data inside the EventDetails, using the provided ServerAvailableEvent
func (t *EventDetails) MergeServerAvailableEvent(v ServerAvailableEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServerFailedEvent returns the union data inside the EventDetails as a ServerFailedEvent
func (t EventDetails) AsServerFailedEvent() (ServerFailedEvent, error) {
	var body ServerFailedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServerFailedEvent overwrites any union data inside the EventDetails as the provided ServerFailedEvent
func (t *EventDetails) FromServerFailedEvent(v ServerFailedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServerFailedEvent performs a merge with any union data inside the EventDetails, using the provided ServerFailedEvent
func (t *EventDetails) MergeServerFailedEvent(v ServerFailedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServerHardwareFailureEvent returns the union data inside the EventDetails as a ServerHardwareFailureEvent
func (t EventDetails) AsServerHardwareFailureEvent() (ServerHardwareFailureEvent, error) {
	var body ServerHardwareFailureEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServerHardwareFailureEvent overwrites any union data inside the EventDetails as the provided ServerHardwareFailureEvent
func (t *EventDetails) FromServerHardwareFailureEvent(v ServerHardwareFailureEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServerHardwareFailureEvent performs a merge with any union data inside the EventDetails, using the provided ServerHardwareFailureEvent
func (t *EventDetails) MergeServerHardwareFailureEvent(v ServerHardwareFailureEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServerRestartedEvent returns the union data inside the EventDetails as a ServerRestartedEvent
func (t EventDetails) AsServerRestartedEvent() (ServerRestartedEvent, error) {
	var body ServerRestartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServerRestartedEvent overwrites any union data inside the EventDetails as the provided ServerRestartedEvent
func (t *EventDetails) FromServerRestartedEvent(v ServerRestartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServerRestartedEvent performs a merge with any union data inside the EventDetails, using the provided ServerRestartedEvent
func (t *EventDetails) MergeServerRestartedEvent(v ServerRestartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServerUnhealthyEvent returns the union data inside the EventDetails as a ServerUnhealthyEvent
func (t EventDetails) AsServerUnhealthyEvent() (ServerUnhealthyEvent, error) {
	var body ServerUnhealthyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServerUnhealthyEvent overwrites any union data inside the EventDetails as the provided ServerUnhealthyEvent
func (t *EventDetails) FromServerUnhealthyEvent(v ServerUnhealthyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServerUnhealthyEvent performs a merge with any union data inside the EventDetails, using the provided ServerUnhealthyEvent
func (t *EventDetails) MergeServerUnhealthyEvent(v ServerUnhealthyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServiceResumedEvent returns the union data inside the EventDetails as a ServiceResumedEvent
func (t EventDetails) AsServiceResumedEvent() (ServiceResumedEvent, error) {
	var body ServiceResumedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceResumedEvent overwrites any union data inside the EventDetails as the provided ServiceResumedEvent
func (t *EventDetails) FromServiceResumedEvent(v ServiceResumedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceResumedEvent performs a merge with any union data inside the EventDetails, using the provided ServiceResumedEvent
func (t *EventDetails) MergeServiceResumedEvent(v ServiceResumedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServiceSuspendedEvent returns the union data inside the EventDetails as a ServiceSuspendedEvent
func (t EventDetails) AsServiceSuspendedEvent() (ServiceSuspendedEvent, error) {
	var body ServiceSuspendedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceSuspendedEvent overwrites any union data inside the EventDetails as the provided ServiceSuspendedEvent
func (t *EventDetails) FromServiceSuspendedEvent(v ServiceSuspendedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceSuspendedEvent performs a merge with any union data inside the EventDetails, using the provided ServiceSuspendedEvent
func (t *EventDetails) MergeServiceSuspendedEvent(v ServiceSuspendedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSuspenderAddedEvent returns the union data inside the EventDetails as a SuspenderAddedEvent
func (t EventDetails) AsSuspenderAddedEvent() (SuspenderAddedEvent, error) {
	var body SuspenderAddedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuspenderAddedEvent overwrites any union data inside the EventDetails as the provided SuspenderAddedEvent
func (t *EventDetails) FromSuspenderAddedEvent(v SuspenderAddedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuspenderAddedEvent performs a merge with any union data inside the EventDetails, using the provided SuspenderAddedEvent
func (t *EventDetails) MergeSuspenderAddedEvent(v SuspenderAddedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSuspenderRemovedEvent returns the union data inside the EventDetails as a SuspenderRemovedEvent
func (t EventDetails) AsSuspenderRemovedEvent() (SuspenderRemovedEvent, error) {
	var body SuspenderRemovedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuspenderRemovedEvent overwrites any union data inside the EventDetails as the provided SuspenderRemovedEvent
func (t *EventDetails) FromSuspenderRemovedEvent(v SuspenderRemovedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuspenderRemovedEvent performs a merge with any union data inside the EventDetails, using the provided SuspenderRemovedEvent
func (t *EventDetails) MergeSuspenderRemovedEvent(v SuspenderRemovedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZeroDowntimeRedeployEndedEvent returns the union data inside the EventDetails as a ZeroDowntimeRedeployEndedEvent
func (t EventDetails) AsZeroDowntimeRedeployEndedEvent() (ZeroDowntimeRedeployEndedEvent, error) {
	var body ZeroDowntimeRedeployEndedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZeroDowntimeRedeployEndedEvent overwrites any union data inside the EventDetails as the provided ZeroDowntimeRedeployEndedEvent
func (t *EventDetails) FromZeroDowntimeRedeployEndedEvent(v ZeroDowntimeRedeployEndedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZeroDowntimeRedeployEndedEvent performs a merge with any union data inside the EventDetails, using the provided ZeroDowntimeRedeployEndedEvent
func (t *EventDetails) MergeZeroDowntimeRedeployEndedEvent(v ZeroDowntimeRedeployEndedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZeroDowntimeRedeployStartedEvent returns the union data inside the EventDetails as a ZeroDowntimeRedeployStartedEvent
func (t EventDetails) AsZeroDowntimeRedeployStartedEvent() (ZeroDowntimeRedeployStartedEvent, error) {
	var body ZeroDowntimeRedeployStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZeroDowntimeRedeployStartedEvent overwrites any union data inside the EventDetails as the provided ZeroDowntimeRedeployStartedEvent
func (t *EventDetails) FromZeroDowntimeRedeployStartedEvent(v ZeroDowntimeRedeployStartedEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZeroDowntimeRedeployStartedEvent performs a merge with any union data inside the EventDetails, using the provided ZeroDowntimeRedeployStartedEvent
func (t *EventDetails) MergeZeroDowntimeRedeployStartedEvent(v ZeroDowntimeRedeployStartedEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
